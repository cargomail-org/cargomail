// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/fedemail/v1/fedemail.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FedemailClient is the client API for Fedemail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FedemailClient interface {
	DraftsList(ctx context.Context, in *DraftsListRequest, opts ...grpc.CallOption) (*ListDraftsResponse, error)
	DraftsCreate(ctx context.Context, in *DraftsCreateRequest, opts ...grpc.CallOption) (*Draft, error)
	DraftsSend(ctx context.Context, in *DraftsSendRequest, opts ...grpc.CallOption) (*Message, error)
	DraftsGet(ctx context.Context, in *DraftsGetRequest, opts ...grpc.CallOption) (*Draft, error)
	DraftsUpdate(ctx context.Context, in *DraftsUpdateRequest, opts ...grpc.CallOption) (*Draft, error)
	DraftsDelete(ctx context.Context, in *DraftsDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LabelsList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListLabelsResponse, error)
	LabelsCreate(ctx context.Context, in *LabelsCreateRequest, opts ...grpc.CallOption) (*Label, error)
	LabelsGet(ctx context.Context, in *LabelsGetRequest, opts ...grpc.CallOption) (*Label, error)
	LabelsUpdate(ctx context.Context, in *LabelsUpdateRequest, opts ...grpc.CallOption) (*Label, error)
	LabelsDelete(ctx context.Context, in *LabelsDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LabelsPatch(ctx context.Context, in *LabelsPatchRequest, opts ...grpc.CallOption) (*Label, error)
	MessagesList(ctx context.Context, in *MessagesListRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	MessagesBatchDelete(ctx context.Context, in *MessagesBatchDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MessagesBatchModify(ctx context.Context, in *MessagesBatchModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MessagesSend(ctx context.Context, in *MessagesSendRequest, opts ...grpc.CallOption) (*Message, error)
	MessagesGet(ctx context.Context, in *MessagesGetRequest, opts ...grpc.CallOption) (*Message, error)
	MessagesDelete(ctx context.Context, in *MessagesDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MessagesModify(ctx context.Context, in *MessagesModifyRequest, opts ...grpc.CallOption) (*Message, error)
	MessagesTrash(ctx context.Context, in *MessagesTrashRequest, opts ...grpc.CallOption) (*Message, error)
	MessagesUntrash(ctx context.Context, in *MessagesUntrashRequest, opts ...grpc.CallOption) (*Message, error)
	MessagesAttachmentsGet(ctx context.Context, in *MessagesAttachmentsGetRequest, opts ...grpc.CallOption) (*MessagePartBody, error)
	ThreadsList(ctx context.Context, in *ThreadsListRequest, opts ...grpc.CallOption) (*ListThreadsResponse, error)
	ThreadsGet(ctx context.Context, in *ThreadsGetRequest, opts ...grpc.CallOption) (*Thread, error)
	ThreadsDelete(ctx context.Context, in *ThreadsDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ThreadsModify(ctx context.Context, in *ThreadsModifyRequest, opts ...grpc.CallOption) (*Thread, error)
	ThreadsTrash(ctx context.Context, in *ThreadsTrashRequest, opts ...grpc.CallOption) (*Thread, error)
	ThreadsUntrash(ctx context.Context, in *ThreadsUntrashRequest, opts ...grpc.CallOption) (*Thread, error)
}

type fedemailClient struct {
	cc grpc.ClientConnInterface
}

func NewFedemailClient(cc grpc.ClientConnInterface) FedemailClient {
	return &fedemailClient{cc}
}

func (c *fedemailClient) DraftsList(ctx context.Context, in *DraftsListRequest, opts ...grpc.CallOption) (*ListDraftsResponse, error) {
	out := new(ListDraftsResponse)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/DraftsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) DraftsCreate(ctx context.Context, in *DraftsCreateRequest, opts ...grpc.CallOption) (*Draft, error) {
	out := new(Draft)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/DraftsCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) DraftsSend(ctx context.Context, in *DraftsSendRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/DraftsSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) DraftsGet(ctx context.Context, in *DraftsGetRequest, opts ...grpc.CallOption) (*Draft, error) {
	out := new(Draft)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/DraftsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) DraftsUpdate(ctx context.Context, in *DraftsUpdateRequest, opts ...grpc.CallOption) (*Draft, error) {
	out := new(Draft)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/DraftsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) DraftsDelete(ctx context.Context, in *DraftsDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/DraftsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) LabelsList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListLabelsResponse, error) {
	out := new(ListLabelsResponse)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/LabelsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) LabelsCreate(ctx context.Context, in *LabelsCreateRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/LabelsCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) LabelsGet(ctx context.Context, in *LabelsGetRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/LabelsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) LabelsUpdate(ctx context.Context, in *LabelsUpdateRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/LabelsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) LabelsDelete(ctx context.Context, in *LabelsDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/LabelsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) LabelsPatch(ctx context.Context, in *LabelsPatchRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/LabelsPatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) MessagesList(ctx context.Context, in *MessagesListRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/MessagesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) MessagesBatchDelete(ctx context.Context, in *MessagesBatchDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/MessagesBatchDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) MessagesBatchModify(ctx context.Context, in *MessagesBatchModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/MessagesBatchModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) MessagesSend(ctx context.Context, in *MessagesSendRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/MessagesSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) MessagesGet(ctx context.Context, in *MessagesGetRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/MessagesGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) MessagesDelete(ctx context.Context, in *MessagesDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/MessagesDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) MessagesModify(ctx context.Context, in *MessagesModifyRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/MessagesModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) MessagesTrash(ctx context.Context, in *MessagesTrashRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/MessagesTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) MessagesUntrash(ctx context.Context, in *MessagesUntrashRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/MessagesUntrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) MessagesAttachmentsGet(ctx context.Context, in *MessagesAttachmentsGetRequest, opts ...grpc.CallOption) (*MessagePartBody, error) {
	out := new(MessagePartBody)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/MessagesAttachmentsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) ThreadsList(ctx context.Context, in *ThreadsListRequest, opts ...grpc.CallOption) (*ListThreadsResponse, error) {
	out := new(ListThreadsResponse)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/ThreadsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) ThreadsGet(ctx context.Context, in *ThreadsGetRequest, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/ThreadsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) ThreadsDelete(ctx context.Context, in *ThreadsDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/ThreadsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) ThreadsModify(ctx context.Context, in *ThreadsModifyRequest, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/ThreadsModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) ThreadsTrash(ctx context.Context, in *ThreadsTrashRequest, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/ThreadsTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedemailClient) ThreadsUntrash(ctx context.Context, in *ThreadsUntrashRequest, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := c.cc.Invoke(ctx, "/fedemail.Fedemail/ThreadsUntrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FedemailServer is the server API for Fedemail service.
// All implementations must embed UnimplementedFedemailServer
// for forward compatibility
type FedemailServer interface {
	DraftsList(context.Context, *DraftsListRequest) (*ListDraftsResponse, error)
	DraftsCreate(context.Context, *DraftsCreateRequest) (*Draft, error)
	DraftsSend(context.Context, *DraftsSendRequest) (*Message, error)
	DraftsGet(context.Context, *DraftsGetRequest) (*Draft, error)
	DraftsUpdate(context.Context, *DraftsUpdateRequest) (*Draft, error)
	DraftsDelete(context.Context, *DraftsDeleteRequest) (*emptypb.Empty, error)
	LabelsList(context.Context, *emptypb.Empty) (*ListLabelsResponse, error)
	LabelsCreate(context.Context, *LabelsCreateRequest) (*Label, error)
	LabelsGet(context.Context, *LabelsGetRequest) (*Label, error)
	LabelsUpdate(context.Context, *LabelsUpdateRequest) (*Label, error)
	LabelsDelete(context.Context, *LabelsDeleteRequest) (*emptypb.Empty, error)
	LabelsPatch(context.Context, *LabelsPatchRequest) (*Label, error)
	MessagesList(context.Context, *MessagesListRequest) (*ListMessagesResponse, error)
	MessagesBatchDelete(context.Context, *MessagesBatchDeleteRequest) (*emptypb.Empty, error)
	MessagesBatchModify(context.Context, *MessagesBatchModifyRequest) (*emptypb.Empty, error)
	MessagesSend(context.Context, *MessagesSendRequest) (*Message, error)
	MessagesGet(context.Context, *MessagesGetRequest) (*Message, error)
	MessagesDelete(context.Context, *MessagesDeleteRequest) (*emptypb.Empty, error)
	MessagesModify(context.Context, *MessagesModifyRequest) (*Message, error)
	MessagesTrash(context.Context, *MessagesTrashRequest) (*Message, error)
	MessagesUntrash(context.Context, *MessagesUntrashRequest) (*Message, error)
	MessagesAttachmentsGet(context.Context, *MessagesAttachmentsGetRequest) (*MessagePartBody, error)
	ThreadsList(context.Context, *ThreadsListRequest) (*ListThreadsResponse, error)
	ThreadsGet(context.Context, *ThreadsGetRequest) (*Thread, error)
	ThreadsDelete(context.Context, *ThreadsDeleteRequest) (*emptypb.Empty, error)
	ThreadsModify(context.Context, *ThreadsModifyRequest) (*Thread, error)
	ThreadsTrash(context.Context, *ThreadsTrashRequest) (*Thread, error)
	ThreadsUntrash(context.Context, *ThreadsUntrashRequest) (*Thread, error)
	mustEmbedUnimplementedFedemailServer()
}

// UnimplementedFedemailServer must be embedded to have forward compatible implementations.
type UnimplementedFedemailServer struct {
}

func (UnimplementedFedemailServer) DraftsList(context.Context, *DraftsListRequest) (*ListDraftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DraftsList not implemented")
}
func (UnimplementedFedemailServer) DraftsCreate(context.Context, *DraftsCreateRequest) (*Draft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DraftsCreate not implemented")
}
func (UnimplementedFedemailServer) DraftsSend(context.Context, *DraftsSendRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DraftsSend not implemented")
}
func (UnimplementedFedemailServer) DraftsGet(context.Context, *DraftsGetRequest) (*Draft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DraftsGet not implemented")
}
func (UnimplementedFedemailServer) DraftsUpdate(context.Context, *DraftsUpdateRequest) (*Draft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DraftsUpdate not implemented")
}
func (UnimplementedFedemailServer) DraftsDelete(context.Context, *DraftsDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DraftsDelete not implemented")
}
func (UnimplementedFedemailServer) LabelsList(context.Context, *emptypb.Empty) (*ListLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelsList not implemented")
}
func (UnimplementedFedemailServer) LabelsCreate(context.Context, *LabelsCreateRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelsCreate not implemented")
}
func (UnimplementedFedemailServer) LabelsGet(context.Context, *LabelsGetRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelsGet not implemented")
}
func (UnimplementedFedemailServer) LabelsUpdate(context.Context, *LabelsUpdateRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelsUpdate not implemented")
}
func (UnimplementedFedemailServer) LabelsDelete(context.Context, *LabelsDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelsDelete not implemented")
}
func (UnimplementedFedemailServer) LabelsPatch(context.Context, *LabelsPatchRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelsPatch not implemented")
}
func (UnimplementedFedemailServer) MessagesList(context.Context, *MessagesListRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesList not implemented")
}
func (UnimplementedFedemailServer) MessagesBatchDelete(context.Context, *MessagesBatchDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesBatchDelete not implemented")
}
func (UnimplementedFedemailServer) MessagesBatchModify(context.Context, *MessagesBatchModifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesBatchModify not implemented")
}
func (UnimplementedFedemailServer) MessagesSend(context.Context, *MessagesSendRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSend not implemented")
}
func (UnimplementedFedemailServer) MessagesGet(context.Context, *MessagesGetRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGet not implemented")
}
func (UnimplementedFedemailServer) MessagesDelete(context.Context, *MessagesDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDelete not implemented")
}
func (UnimplementedFedemailServer) MessagesModify(context.Context, *MessagesModifyRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesModify not implemented")
}
func (UnimplementedFedemailServer) MessagesTrash(context.Context, *MessagesTrashRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesTrash not implemented")
}
func (UnimplementedFedemailServer) MessagesUntrash(context.Context, *MessagesUntrashRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUntrash not implemented")
}
func (UnimplementedFedemailServer) MessagesAttachmentsGet(context.Context, *MessagesAttachmentsGetRequest) (*MessagePartBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAttachmentsGet not implemented")
}
func (UnimplementedFedemailServer) ThreadsList(context.Context, *ThreadsListRequest) (*ListThreadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsList not implemented")
}
func (UnimplementedFedemailServer) ThreadsGet(context.Context, *ThreadsGetRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsGet not implemented")
}
func (UnimplementedFedemailServer) ThreadsDelete(context.Context, *ThreadsDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsDelete not implemented")
}
func (UnimplementedFedemailServer) ThreadsModify(context.Context, *ThreadsModifyRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsModify not implemented")
}
func (UnimplementedFedemailServer) ThreadsTrash(context.Context, *ThreadsTrashRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsTrash not implemented")
}
func (UnimplementedFedemailServer) ThreadsUntrash(context.Context, *ThreadsUntrashRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsUntrash not implemented")
}
func (UnimplementedFedemailServer) mustEmbedUnimplementedFedemailServer() {}

// UnsafeFedemailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FedemailServer will
// result in compilation errors.
type UnsafeFedemailServer interface {
	mustEmbedUnimplementedFedemailServer()
}

func RegisterFedemailServer(s grpc.ServiceRegistrar, srv FedemailServer) {
	s.RegisterService(&Fedemail_ServiceDesc, srv)
}

func _Fedemail_DraftsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DraftsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).DraftsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/DraftsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).DraftsList(ctx, req.(*DraftsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_DraftsCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DraftsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).DraftsCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/DraftsCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).DraftsCreate(ctx, req.(*DraftsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_DraftsSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DraftsSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).DraftsSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/DraftsSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).DraftsSend(ctx, req.(*DraftsSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_DraftsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DraftsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).DraftsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/DraftsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).DraftsGet(ctx, req.(*DraftsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_DraftsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DraftsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).DraftsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/DraftsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).DraftsUpdate(ctx, req.(*DraftsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_DraftsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DraftsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).DraftsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/DraftsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).DraftsDelete(ctx, req.(*DraftsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_LabelsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).LabelsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/LabelsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).LabelsList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_LabelsCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).LabelsCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/LabelsCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).LabelsCreate(ctx, req.(*LabelsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_LabelsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).LabelsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/LabelsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).LabelsGet(ctx, req.(*LabelsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_LabelsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).LabelsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/LabelsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).LabelsUpdate(ctx, req.(*LabelsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_LabelsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).LabelsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/LabelsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).LabelsDelete(ctx, req.(*LabelsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_LabelsPatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelsPatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).LabelsPatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/LabelsPatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).LabelsPatch(ctx, req.(*LabelsPatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_MessagesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).MessagesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/MessagesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).MessagesList(ctx, req.(*MessagesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_MessagesBatchDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesBatchDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).MessagesBatchDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/MessagesBatchDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).MessagesBatchDelete(ctx, req.(*MessagesBatchDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_MessagesBatchModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesBatchModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).MessagesBatchModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/MessagesBatchModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).MessagesBatchModify(ctx, req.(*MessagesBatchModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_MessagesSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).MessagesSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/MessagesSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).MessagesSend(ctx, req.(*MessagesSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_MessagesGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).MessagesGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/MessagesGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).MessagesGet(ctx, req.(*MessagesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_MessagesDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).MessagesDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/MessagesDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).MessagesDelete(ctx, req.(*MessagesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_MessagesModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).MessagesModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/MessagesModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).MessagesModify(ctx, req.(*MessagesModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_MessagesTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesTrashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).MessagesTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/MessagesTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).MessagesTrash(ctx, req.(*MessagesTrashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_MessagesUntrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesUntrashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).MessagesUntrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/MessagesUntrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).MessagesUntrash(ctx, req.(*MessagesUntrashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_MessagesAttachmentsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesAttachmentsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).MessagesAttachmentsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/MessagesAttachmentsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).MessagesAttachmentsGet(ctx, req.(*MessagesAttachmentsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_ThreadsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).ThreadsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/ThreadsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).ThreadsList(ctx, req.(*ThreadsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_ThreadsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).ThreadsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/ThreadsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).ThreadsGet(ctx, req.(*ThreadsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_ThreadsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).ThreadsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/ThreadsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).ThreadsDelete(ctx, req.(*ThreadsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_ThreadsModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).ThreadsModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/ThreadsModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).ThreadsModify(ctx, req.(*ThreadsModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_ThreadsTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsTrashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).ThreadsTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/ThreadsTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).ThreadsTrash(ctx, req.(*ThreadsTrashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fedemail_ThreadsUntrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsUntrashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedemailServer).ThreadsUntrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fedemail.Fedemail/ThreadsUntrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedemailServer).ThreadsUntrash(ctx, req.(*ThreadsUntrashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fedemail_ServiceDesc is the grpc.ServiceDesc for Fedemail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fedemail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fedemail.Fedemail",
	HandlerType: (*FedemailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DraftsList",
			Handler:    _Fedemail_DraftsList_Handler,
		},
		{
			MethodName: "DraftsCreate",
			Handler:    _Fedemail_DraftsCreate_Handler,
		},
		{
			MethodName: "DraftsSend",
			Handler:    _Fedemail_DraftsSend_Handler,
		},
		{
			MethodName: "DraftsGet",
			Handler:    _Fedemail_DraftsGet_Handler,
		},
		{
			MethodName: "DraftsUpdate",
			Handler:    _Fedemail_DraftsUpdate_Handler,
		},
		{
			MethodName: "DraftsDelete",
			Handler:    _Fedemail_DraftsDelete_Handler,
		},
		{
			MethodName: "LabelsList",
			Handler:    _Fedemail_LabelsList_Handler,
		},
		{
			MethodName: "LabelsCreate",
			Handler:    _Fedemail_LabelsCreate_Handler,
		},
		{
			MethodName: "LabelsGet",
			Handler:    _Fedemail_LabelsGet_Handler,
		},
		{
			MethodName: "LabelsUpdate",
			Handler:    _Fedemail_LabelsUpdate_Handler,
		},
		{
			MethodName: "LabelsDelete",
			Handler:    _Fedemail_LabelsDelete_Handler,
		},
		{
			MethodName: "LabelsPatch",
			Handler:    _Fedemail_LabelsPatch_Handler,
		},
		{
			MethodName: "MessagesList",
			Handler:    _Fedemail_MessagesList_Handler,
		},
		{
			MethodName: "MessagesBatchDelete",
			Handler:    _Fedemail_MessagesBatchDelete_Handler,
		},
		{
			MethodName: "MessagesBatchModify",
			Handler:    _Fedemail_MessagesBatchModify_Handler,
		},
		{
			MethodName: "MessagesSend",
			Handler:    _Fedemail_MessagesSend_Handler,
		},
		{
			MethodName: "MessagesGet",
			Handler:    _Fedemail_MessagesGet_Handler,
		},
		{
			MethodName: "MessagesDelete",
			Handler:    _Fedemail_MessagesDelete_Handler,
		},
		{
			MethodName: "MessagesModify",
			Handler:    _Fedemail_MessagesModify_Handler,
		},
		{
			MethodName: "MessagesTrash",
			Handler:    _Fedemail_MessagesTrash_Handler,
		},
		{
			MethodName: "MessagesUntrash",
			Handler:    _Fedemail_MessagesUntrash_Handler,
		},
		{
			MethodName: "MessagesAttachmentsGet",
			Handler:    _Fedemail_MessagesAttachmentsGet_Handler,
		},
		{
			MethodName: "ThreadsList",
			Handler:    _Fedemail_ThreadsList_Handler,
		},
		{
			MethodName: "ThreadsGet",
			Handler:    _Fedemail_ThreadsGet_Handler,
		},
		{
			MethodName: "ThreadsDelete",
			Handler:    _Fedemail_ThreadsDelete_Handler,
		},
		{
			MethodName: "ThreadsModify",
			Handler:    _Fedemail_ThreadsModify_Handler,
		},
		{
			MethodName: "ThreadsTrash",
			Handler:    _Fedemail_ThreadsTrash_Handler,
		},
		{
			MethodName: "ThreadsUntrash",
			Handler:    _Fedemail_ThreadsUntrash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fedemail/v1/fedemail.proto",
}
