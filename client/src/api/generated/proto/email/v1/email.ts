// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "proto/email/v1/email.proto" (package "email.v1", syntax proto3)
// tslint:disable
import { Empty } from "../../../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message email.v1.BatchDeleteMessagesRequest
 */
export interface BatchDeleteMessagesRequest {
    /**
     * @generated from protobuf field: repeated string ids = 1;
     */
    ids: string[];
}
/**
 * @generated from protobuf message email.v1.BatchModifyMessagesRequest
 */
export interface BatchModifyMessagesRequest {
    /**
     * @generated from protobuf field: repeated string add_label_ids = 1;
     */
    addLabelIds: string[];
    /**
     * @generated from protobuf field: repeated string ids = 2;
     */
    ids: string[];
    /**
     * @generated from protobuf field: repeated string remove_label_ids = 3;
     */
    removeLabelIds: string[];
}
/**
 * @generated from protobuf message email.v1.Draft
 */
export interface Draft {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: email.v1.Message message = 2;
     */
    message?: Message;
}
/**
 * @generated from protobuf message email.v1.Label
 */
export interface Label {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: email.v1.Label.Type type = 3;
     */
    type: Label_Type;
}
/**
 * @generated from protobuf enum email.v1.Label.Type
 */
export enum Label_Type {
    /**
     * @generated from protobuf enum value: SYSTEM = 0;
     */
    SYSTEM = 0,
    /**
     * @generated from protobuf enum value: USER = 1;
     */
    USER = 1
}
/**
 * @generated from protobuf message email.v1.File
 */
export interface File {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string uri_at_sender = 2;
     */
    uriAtSender: string;
    /**
     * @generated from protobuf field: string uri_at_recipient = 3;
     */
    uriAtRecipient: string;
    /**
     * @generated from protobuf field: string sha256sum = 4 [json_name = "sha256sum"];
     */
    sha256Sum: string;
    /**
     * @generated from protobuf field: string filename = 5;
     */
    filename: string;
    /**
     * @generated from protobuf field: string filetype = 6;
     */
    filetype: string;
}
/**
 * @generated from protobuf message email.v1.ListDraftsResponse
 */
export interface ListDraftsResponse {
    /**
     * @generated from protobuf field: repeated email.v1.Draft drafts = 1;
     */
    drafts: Draft[];
}
/**
 * @generated from protobuf message email.v1.ListLabelsResponse
 */
export interface ListLabelsResponse {
    /**
     * @generated from protobuf field: repeated email.v1.Label labels = 1;
     */
    labels: Label[];
}
/**
 * @generated from protobuf message email.v1.ListMessagesResponse
 */
export interface ListMessagesResponse {
    /**
     * @generated from protobuf field: repeated email.v1.Message messages = 1;
     */
    messages: Message[];
}
/**
 * @generated from protobuf message email.v1.ListThreadsResponse
 */
export interface ListThreadsResponse {
    /**
     * @generated from protobuf field: repeated email.v1.Thread threads = 1;
     */
    threads: Thread[];
}
/**
 * @generated from protobuf message email.v1.Message
 */
export interface Message {
    /**
     * @generated from protobuf field: string history_id = 1;
     */
    historyId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string internal_date = 3;
     */
    internalDate: string;
    /**
     * @generated from protobuf field: repeated string label_ids = 4;
     */
    labelIds: string[];
    /**
     * @generated from protobuf field: email.v1.MessagePart payload = 5;
     */
    payload?: MessagePart;
    /**
     * @generated from protobuf field: string raw = 6;
     */
    raw: string;
    /**
     * @generated from protobuf field: string snippet = 7;
     */
    snippet: string;
    /**
     * @generated from protobuf field: string thread_id = 8;
     */
    threadId: string;
}
/**
 * @generated from protobuf message email.v1.MessagePart
 */
export interface MessagePart {
    /**
     * @generated from protobuf field: email.v1.MessagePartBody body = 1;
     */
    body?: MessagePartBody;
    /**
     * @generated from protobuf field: string filename = 2;
     */
    filename: string;
    /**
     * @generated from protobuf field: repeated email.v1.MessagePartHeader headers = 3;
     */
    headers: MessagePartHeader[];
    /**
     * @generated from protobuf field: string mime_type = 4;
     */
    mimeType: string;
    /**
     * @generated from protobuf field: string part_id = 5;
     */
    partId: string;
    /**
     * @generated from protobuf field: repeated email.v1.MessagePart parts = 6;
     */
    parts: MessagePart[];
}
/**
 * @generated from protobuf message email.v1.MessagePartBody
 */
export interface MessagePartBody {
    /**
     * @generated from protobuf field: string attachment_id = 1;
     */
    attachmentId: string;
    /**
     * @generated from protobuf field: string data = 2;
     */
    data: string;
    /**
     * @generated from protobuf field: int32 size = 3;
     */
    size: number;
}
/**
 * @generated from protobuf message email.v1.MessagePartHeader
 */
export interface MessagePartHeader {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message email.v1.ModifyMessageRequest
 */
export interface ModifyMessageRequest {
    /**
     * @generated from protobuf field: repeated string add_label_ids = 1;
     */
    addLabelIds: string[];
    /**
     * @generated from protobuf field: repeated string remove_label_ids = 2;
     */
    removeLabelIds: string[];
}
/**
 * @generated from protobuf message email.v1.ModifyThreadRequest
 */
export interface ModifyThreadRequest {
    /**
     * @generated from protobuf field: repeated string add_label_ids = 1;
     */
    addLabelIds: string[];
    /**
     * @generated from protobuf field: repeated string remove_label_ids = 2;
     */
    removeLabelIds: string[];
}
/**
 * @generated from protobuf message email.v1.Thread
 */
export interface Thread {
    /**
     * @generated from protobuf field: string history_id = 1;
     */
    historyId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: repeated email.v1.Message messages = 3;
     */
    messages: Message[];
    /**
     * @generated from protobuf field: string snippet = 4;
     */
    snippet: string;
}
/**
 * @generated from protobuf message email.v1.DraftsListRequest
 */
export interface DraftsListRequest {
    /**
     * @generated from protobuf field: int64 max_results = 1;
     */
    maxResults: bigint;
}
/**
 * @generated from protobuf message email.v1.DraftsCreateRequest
 */
export interface DraftsCreateRequest {
    /**
     * @generated from protobuf field: email.v1.Draft message_raw = 1;
     */
    messageRaw?: Draft;
}
/**
 * @generated from protobuf message email.v1.DraftsSendRequest
 */
export interface DraftsSendRequest {
    /**
     * @generated from protobuf field: email.v1.Draft message_raw = 1;
     */
    messageRaw?: Draft;
}
/**
 * @generated from protobuf message email.v1.DraftsGetRequest
 */
export interface DraftsGetRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message email.v1.DraftsUpdateRequest
 */
export interface DraftsUpdateRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: email.v1.Draft message_raw = 2;
     */
    messageRaw?: Draft;
}
/**
 * @generated from protobuf message email.v1.DraftsDeleteRequest
 */
export interface DraftsDeleteRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message email.v1.LabelsCreateRequest
 */
export interface LabelsCreateRequest {
    /**
     * @generated from protobuf field: email.v1.Label label = 1;
     */
    label?: Label;
}
/**
 * @generated from protobuf message email.v1.LabelsGetRequest
 */
export interface LabelsGetRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message email.v1.LabelsUpdateRequest
 */
export interface LabelsUpdateRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: email.v1.Label label = 2;
     */
    label?: Label;
}
/**
 * @generated from protobuf message email.v1.LabelsDeleteRequest
 */
export interface LabelsDeleteRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message email.v1.LabelsPatchRequest
 */
export interface LabelsPatchRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: email.v1.Label label = 2;
     */
    label?: Label;
}
/**
 * @generated from protobuf message email.v1.MessagesListRequest
 */
export interface MessagesListRequest {
    /**
     * @generated from protobuf field: repeated string label_ids = 1;
     */
    labelIds: string[];
    /**
     * @generated from protobuf field: int64 max_results = 2;
     */
    maxResults: bigint;
}
/**
 * @generated from protobuf message email.v1.MessagesBatchDeleteRequest
 */
export interface MessagesBatchDeleteRequest {
    /**
     * @generated from protobuf field: email.v1.BatchDeleteMessagesRequest batch_delete_messages_request = 1;
     */
    batchDeleteMessagesRequest?: BatchDeleteMessagesRequest;
}
/**
 * @generated from protobuf message email.v1.MessagesBatchModifyRequest
 */
export interface MessagesBatchModifyRequest {
    /**
     * @generated from protobuf field: email.v1.BatchModifyMessagesRequest batch_modify_messages_request = 1;
     */
    batchModifyMessagesRequest?: BatchModifyMessagesRequest;
}
/**
 * @generated from protobuf message email.v1.MessagesSendRequest
 */
export interface MessagesSendRequest {
    /**
     * @generated from protobuf field: email.v1.Message message_raw = 1;
     */
    messageRaw?: Message;
}
/**
 * @generated from protobuf message email.v1.MessagesGetRequest
 */
export interface MessagesGetRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message email.v1.MessagesDeleteRequest
 */
export interface MessagesDeleteRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message email.v1.MessagesModifyRequest
 */
export interface MessagesModifyRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: email.v1.ModifyMessageRequest modify_message_request = 2;
     */
    modifyMessageRequest?: ModifyMessageRequest;
}
/**
 * @generated from protobuf message email.v1.MessagesTrashRequest
 */
export interface MessagesTrashRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message email.v1.MessagesUntrashRequest
 */
export interface MessagesUntrashRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message email.v1.MessagesAttachmentsGetRequest
 */
export interface MessagesAttachmentsGetRequest {
    /**
     * @generated from protobuf field: string messageId = 1;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
}
/**
 * @generated from protobuf message email.v1.ThreadsListRequest
 */
export interface ThreadsListRequest {
    /**
     * @generated from protobuf field: repeated string label_ids = 1;
     */
    labelIds: string[];
    /**
     * @generated from protobuf field: int64 max_results = 2;
     */
    maxResults: bigint;
}
/**
 * @generated from protobuf message email.v1.ThreadsGetRequest
 */
export interface ThreadsGetRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message email.v1.ThreadsDeleteRequest
 */
export interface ThreadsDeleteRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message email.v1.ThreadsModifyRequest
 */
export interface ThreadsModifyRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: email.v1.ModifyThreadRequest modify_thread_request = 2;
     */
    modifyThreadRequest?: ModifyThreadRequest;
}
/**
 * @generated from protobuf message email.v1.ThreadsTrashRequest
 */
export interface ThreadsTrashRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message email.v1.ThreadsUntrashRequest
 */
export interface ThreadsUntrashRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class BatchDeleteMessagesRequest$Type extends MessageType<BatchDeleteMessagesRequest> {
    constructor() {
        super("email.v1.BatchDeleteMessagesRequest", [
            { no: 1, name: "ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BatchDeleteMessagesRequest>): BatchDeleteMessagesRequest {
        const message = { ids: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BatchDeleteMessagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchDeleteMessagesRequest): BatchDeleteMessagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string ids */ 1:
                    message.ids.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchDeleteMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string ids = 1; */
        for (let i = 0; i < message.ids.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.ids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.BatchDeleteMessagesRequest
 */
export const BatchDeleteMessagesRequest = new BatchDeleteMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchModifyMessagesRequest$Type extends MessageType<BatchModifyMessagesRequest> {
    constructor() {
        super("email.v1.BatchModifyMessagesRequest", [
            { no: 1, name: "add_label_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "remove_label_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BatchModifyMessagesRequest>): BatchModifyMessagesRequest {
        const message = { addLabelIds: [], ids: [], removeLabelIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BatchModifyMessagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchModifyMessagesRequest): BatchModifyMessagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string add_label_ids */ 1:
                    message.addLabelIds.push(reader.string());
                    break;
                case /* repeated string ids */ 2:
                    message.ids.push(reader.string());
                    break;
                case /* repeated string remove_label_ids */ 3:
                    message.removeLabelIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchModifyMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string add_label_ids = 1; */
        for (let i = 0; i < message.addLabelIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.addLabelIds[i]);
        /* repeated string ids = 2; */
        for (let i = 0; i < message.ids.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.ids[i]);
        /* repeated string remove_label_ids = 3; */
        for (let i = 0; i < message.removeLabelIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.removeLabelIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.BatchModifyMessagesRequest
 */
export const BatchModifyMessagesRequest = new BatchModifyMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Draft$Type extends MessageType<Draft> {
    constructor() {
        super("email.v1.Draft", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "message", T: () => Message }
        ]);
    }
    create(value?: PartialMessage<Draft>): Draft {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Draft>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Draft): Draft {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* email.v1.Message message */ 2:
                    message.message = Message.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Draft, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* email.v1.Message message = 2; */
        if (message.message)
            Message.internalBinaryWrite(message.message, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.Draft
 */
export const Draft = new Draft$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Label$Type extends MessageType<Label> {
    constructor() {
        super("email.v1.Label", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["email.v1.Label.Type", Label_Type] }
        ]);
    }
    create(value?: PartialMessage<Label>): Label {
        const message = { id: "", name: "", type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Label>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Label): Label {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* email.v1.Label.Type type */ 3:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Label, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* email.v1.Label.Type type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.Label
 */
export const Label = new Label$Type();
// @generated message type with reflection information, may provide speed optimized methods
class File$Type extends MessageType<File> {
    constructor() {
        super("email.v1.File", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri_at_sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "uri_at_recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sha256sum", kind: "scalar", jsonName: "sha256sum", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "filename", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "filetype", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<File>): File {
        const message = { id: "", uriAtSender: "", uriAtRecipient: "", sha256Sum: "", filename: "", filetype: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: File): File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string uri_at_sender */ 2:
                    message.uriAtSender = reader.string();
                    break;
                case /* string uri_at_recipient */ 3:
                    message.uriAtRecipient = reader.string();
                    break;
                case /* string sha256sum = 4 [json_name = "sha256sum"];*/ 4:
                    message.sha256Sum = reader.string();
                    break;
                case /* string filename */ 5:
                    message.filename = reader.string();
                    break;
                case /* string filetype */ 6:
                    message.filetype = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string uri_at_sender = 2; */
        if (message.uriAtSender !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uriAtSender);
        /* string uri_at_recipient = 3; */
        if (message.uriAtRecipient !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.uriAtRecipient);
        /* string sha256sum = 4 [json_name = "sha256sum"]; */
        if (message.sha256Sum !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sha256Sum);
        /* string filename = 5; */
        if (message.filename !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.filename);
        /* string filetype = 6; */
        if (message.filetype !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.filetype);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.File
 */
export const File = new File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDraftsResponse$Type extends MessageType<ListDraftsResponse> {
    constructor() {
        super("email.v1.ListDraftsResponse", [
            { no: 1, name: "drafts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Draft }
        ]);
    }
    create(value?: PartialMessage<ListDraftsResponse>): ListDraftsResponse {
        const message = { drafts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListDraftsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDraftsResponse): ListDraftsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated email.v1.Draft drafts */ 1:
                    message.drafts.push(Draft.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDraftsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated email.v1.Draft drafts = 1; */
        for (let i = 0; i < message.drafts.length; i++)
            Draft.internalBinaryWrite(message.drafts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.ListDraftsResponse
 */
export const ListDraftsResponse = new ListDraftsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListLabelsResponse$Type extends MessageType<ListLabelsResponse> {
    constructor() {
        super("email.v1.ListLabelsResponse", [
            { no: 1, name: "labels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Label }
        ]);
    }
    create(value?: PartialMessage<ListLabelsResponse>): ListLabelsResponse {
        const message = { labels: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListLabelsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListLabelsResponse): ListLabelsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated email.v1.Label labels */ 1:
                    message.labels.push(Label.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListLabelsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated email.v1.Label labels = 1; */
        for (let i = 0; i < message.labels.length; i++)
            Label.internalBinaryWrite(message.labels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.ListLabelsResponse
 */
export const ListLabelsResponse = new ListLabelsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMessagesResponse$Type extends MessageType<ListMessagesResponse> {
    constructor() {
        super("email.v1.ListMessagesResponse", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message }
        ]);
    }
    create(value?: PartialMessage<ListMessagesResponse>): ListMessagesResponse {
        const message = { messages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListMessagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMessagesResponse): ListMessagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated email.v1.Message messages */ 1:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMessagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated email.v1.Message messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.ListMessagesResponse
 */
export const ListMessagesResponse = new ListMessagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListThreadsResponse$Type extends MessageType<ListThreadsResponse> {
    constructor() {
        super("email.v1.ListThreadsResponse", [
            { no: 1, name: "threads", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Thread }
        ]);
    }
    create(value?: PartialMessage<ListThreadsResponse>): ListThreadsResponse {
        const message = { threads: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListThreadsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListThreadsResponse): ListThreadsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated email.v1.Thread threads */ 1:
                    message.threads.push(Thread.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListThreadsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated email.v1.Thread threads = 1; */
        for (let i = 0; i < message.threads.length; i++)
            Thread.internalBinaryWrite(message.threads[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.ListThreadsResponse
 */
export const ListThreadsResponse = new ListThreadsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("email.v1.Message", [
            { no: 1, name: "history_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "internal_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "label_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "payload", kind: "message", T: () => MessagePart },
            { no: 6, name: "raw", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "snippet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "thread_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = { historyId: "", id: "", internalDate: "", labelIds: [], raw: "", snippet: "", threadId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string history_id */ 1:
                    message.historyId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string internal_date */ 3:
                    message.internalDate = reader.string();
                    break;
                case /* repeated string label_ids */ 4:
                    message.labelIds.push(reader.string());
                    break;
                case /* email.v1.MessagePart payload */ 5:
                    message.payload = MessagePart.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                case /* string raw */ 6:
                    message.raw = reader.string();
                    break;
                case /* string snippet */ 7:
                    message.snippet = reader.string();
                    break;
                case /* string thread_id */ 8:
                    message.threadId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string history_id = 1; */
        if (message.historyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.historyId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string internal_date = 3; */
        if (message.internalDate !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.internalDate);
        /* repeated string label_ids = 4; */
        for (let i = 0; i < message.labelIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.labelIds[i]);
        /* email.v1.MessagePart payload = 5; */
        if (message.payload)
            MessagePart.internalBinaryWrite(message.payload, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string raw = 6; */
        if (message.raw !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.raw);
        /* string snippet = 7; */
        if (message.snippet !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.snippet);
        /* string thread_id = 8; */
        if (message.threadId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.threadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagePart$Type extends MessageType<MessagePart> {
    constructor() {
        super("email.v1.MessagePart", [
            { no: 1, name: "body", kind: "message", T: () => MessagePartBody },
            { no: 2, name: "filename", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "headers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MessagePartHeader },
            { no: 4, name: "mime_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "part_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "parts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MessagePart }
        ]);
    }
    create(value?: PartialMessage<MessagePart>): MessagePart {
        const message = { filename: "", headers: [], mimeType: "", partId: "", parts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagePart>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagePart): MessagePart {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* email.v1.MessagePartBody body */ 1:
                    message.body = MessagePartBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                case /* string filename */ 2:
                    message.filename = reader.string();
                    break;
                case /* repeated email.v1.MessagePartHeader headers */ 3:
                    message.headers.push(MessagePartHeader.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string mime_type */ 4:
                    message.mimeType = reader.string();
                    break;
                case /* string part_id */ 5:
                    message.partId = reader.string();
                    break;
                case /* repeated email.v1.MessagePart parts */ 6:
                    message.parts.push(MessagePart.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagePart, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* email.v1.MessagePartBody body = 1; */
        if (message.body)
            MessagePartBody.internalBinaryWrite(message.body, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string filename = 2; */
        if (message.filename !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filename);
        /* repeated email.v1.MessagePartHeader headers = 3; */
        for (let i = 0; i < message.headers.length; i++)
            MessagePartHeader.internalBinaryWrite(message.headers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string mime_type = 4; */
        if (message.mimeType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.mimeType);
        /* string part_id = 5; */
        if (message.partId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.partId);
        /* repeated email.v1.MessagePart parts = 6; */
        for (let i = 0; i < message.parts.length; i++)
            MessagePart.internalBinaryWrite(message.parts[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagePart
 */
export const MessagePart = new MessagePart$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagePartBody$Type extends MessageType<MessagePartBody> {
    constructor() {
        super("email.v1.MessagePartBody", [
            { no: 1, name: "attachment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "size", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MessagePartBody>): MessagePartBody {
        const message = { attachmentId: "", data: "", size: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagePartBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagePartBody): MessagePartBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string attachment_id */ 1:
                    message.attachmentId = reader.string();
                    break;
                case /* string data */ 2:
                    message.data = reader.string();
                    break;
                case /* int32 size */ 3:
                    message.size = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagePartBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string attachment_id = 1; */
        if (message.attachmentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.attachmentId);
        /* string data = 2; */
        if (message.data !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.data);
        /* int32 size = 3; */
        if (message.size !== 0)
            writer.tag(3, WireType.Varint).int32(message.size);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagePartBody
 */
export const MessagePartBody = new MessagePartBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagePartHeader$Type extends MessageType<MessagePartHeader> {
    constructor() {
        super("email.v1.MessagePartHeader", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MessagePartHeader>): MessagePartHeader {
        const message = { name: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagePartHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagePartHeader): MessagePartHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagePartHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagePartHeader
 */
export const MessagePartHeader = new MessagePartHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModifyMessageRequest$Type extends MessageType<ModifyMessageRequest> {
    constructor() {
        super("email.v1.ModifyMessageRequest", [
            { no: 1, name: "add_label_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "remove_label_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ModifyMessageRequest>): ModifyMessageRequest {
        const message = { addLabelIds: [], removeLabelIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ModifyMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModifyMessageRequest): ModifyMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string add_label_ids */ 1:
                    message.addLabelIds.push(reader.string());
                    break;
                case /* repeated string remove_label_ids */ 2:
                    message.removeLabelIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModifyMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string add_label_ids = 1; */
        for (let i = 0; i < message.addLabelIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.addLabelIds[i]);
        /* repeated string remove_label_ids = 2; */
        for (let i = 0; i < message.removeLabelIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.removeLabelIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.ModifyMessageRequest
 */
export const ModifyMessageRequest = new ModifyMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModifyThreadRequest$Type extends MessageType<ModifyThreadRequest> {
    constructor() {
        super("email.v1.ModifyThreadRequest", [
            { no: 1, name: "add_label_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "remove_label_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ModifyThreadRequest>): ModifyThreadRequest {
        const message = { addLabelIds: [], removeLabelIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ModifyThreadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModifyThreadRequest): ModifyThreadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string add_label_ids */ 1:
                    message.addLabelIds.push(reader.string());
                    break;
                case /* repeated string remove_label_ids */ 2:
                    message.removeLabelIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModifyThreadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string add_label_ids = 1; */
        for (let i = 0; i < message.addLabelIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.addLabelIds[i]);
        /* repeated string remove_label_ids = 2; */
        for (let i = 0; i < message.removeLabelIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.removeLabelIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.ModifyThreadRequest
 */
export const ModifyThreadRequest = new ModifyThreadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Thread$Type extends MessageType<Thread> {
    constructor() {
        super("email.v1.Thread", [
            { no: 1, name: "history_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message },
            { no: 4, name: "snippet", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Thread>): Thread {
        const message = { historyId: "", id: "", messages: [], snippet: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Thread>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Thread): Thread {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string history_id */ 1:
                    message.historyId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* repeated email.v1.Message messages */ 3:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string snippet */ 4:
                    message.snippet = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Thread, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string history_id = 1; */
        if (message.historyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.historyId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* repeated email.v1.Message messages = 3; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string snippet = 4; */
        if (message.snippet !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.snippet);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.Thread
 */
export const Thread = new Thread$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DraftsListRequest$Type extends MessageType<DraftsListRequest> {
    constructor() {
        super("email.v1.DraftsListRequest", [
            { no: 1, name: "max_results", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DraftsListRequest>): DraftsListRequest {
        const message = { maxResults: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DraftsListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DraftsListRequest): DraftsListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 max_results */ 1:
                    message.maxResults = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DraftsListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 max_results = 1; */
        if (message.maxResults !== 0n)
            writer.tag(1, WireType.Varint).int64(message.maxResults);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.DraftsListRequest
 */
export const DraftsListRequest = new DraftsListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DraftsCreateRequest$Type extends MessageType<DraftsCreateRequest> {
    constructor() {
        super("email.v1.DraftsCreateRequest", [
            { no: 1, name: "message_raw", kind: "message", T: () => Draft }
        ]);
    }
    create(value?: PartialMessage<DraftsCreateRequest>): DraftsCreateRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DraftsCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DraftsCreateRequest): DraftsCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* email.v1.Draft message_raw */ 1:
                    message.messageRaw = Draft.internalBinaryRead(reader, reader.uint32(), options, message.messageRaw);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DraftsCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* email.v1.Draft message_raw = 1; */
        if (message.messageRaw)
            Draft.internalBinaryWrite(message.messageRaw, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.DraftsCreateRequest
 */
export const DraftsCreateRequest = new DraftsCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DraftsSendRequest$Type extends MessageType<DraftsSendRequest> {
    constructor() {
        super("email.v1.DraftsSendRequest", [
            { no: 1, name: "message_raw", kind: "message", T: () => Draft }
        ]);
    }
    create(value?: PartialMessage<DraftsSendRequest>): DraftsSendRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DraftsSendRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DraftsSendRequest): DraftsSendRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* email.v1.Draft message_raw */ 1:
                    message.messageRaw = Draft.internalBinaryRead(reader, reader.uint32(), options, message.messageRaw);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DraftsSendRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* email.v1.Draft message_raw = 1; */
        if (message.messageRaw)
            Draft.internalBinaryWrite(message.messageRaw, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.DraftsSendRequest
 */
export const DraftsSendRequest = new DraftsSendRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DraftsGetRequest$Type extends MessageType<DraftsGetRequest> {
    constructor() {
        super("email.v1.DraftsGetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DraftsGetRequest>): DraftsGetRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DraftsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DraftsGetRequest): DraftsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DraftsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.DraftsGetRequest
 */
export const DraftsGetRequest = new DraftsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DraftsUpdateRequest$Type extends MessageType<DraftsUpdateRequest> {
    constructor() {
        super("email.v1.DraftsUpdateRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message_raw", kind: "message", T: () => Draft }
        ]);
    }
    create(value?: PartialMessage<DraftsUpdateRequest>): DraftsUpdateRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DraftsUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DraftsUpdateRequest): DraftsUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* email.v1.Draft message_raw */ 2:
                    message.messageRaw = Draft.internalBinaryRead(reader, reader.uint32(), options, message.messageRaw);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DraftsUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* email.v1.Draft message_raw = 2; */
        if (message.messageRaw)
            Draft.internalBinaryWrite(message.messageRaw, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.DraftsUpdateRequest
 */
export const DraftsUpdateRequest = new DraftsUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DraftsDeleteRequest$Type extends MessageType<DraftsDeleteRequest> {
    constructor() {
        super("email.v1.DraftsDeleteRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DraftsDeleteRequest>): DraftsDeleteRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DraftsDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DraftsDeleteRequest): DraftsDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DraftsDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.DraftsDeleteRequest
 */
export const DraftsDeleteRequest = new DraftsDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LabelsCreateRequest$Type extends MessageType<LabelsCreateRequest> {
    constructor() {
        super("email.v1.LabelsCreateRequest", [
            { no: 1, name: "label", kind: "message", T: () => Label }
        ]);
    }
    create(value?: PartialMessage<LabelsCreateRequest>): LabelsCreateRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LabelsCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LabelsCreateRequest): LabelsCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* email.v1.Label label */ 1:
                    message.label = Label.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LabelsCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* email.v1.Label label = 1; */
        if (message.label)
            Label.internalBinaryWrite(message.label, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.LabelsCreateRequest
 */
export const LabelsCreateRequest = new LabelsCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LabelsGetRequest$Type extends MessageType<LabelsGetRequest> {
    constructor() {
        super("email.v1.LabelsGetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LabelsGetRequest>): LabelsGetRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LabelsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LabelsGetRequest): LabelsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LabelsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.LabelsGetRequest
 */
export const LabelsGetRequest = new LabelsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LabelsUpdateRequest$Type extends MessageType<LabelsUpdateRequest> {
    constructor() {
        super("email.v1.LabelsUpdateRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "label", kind: "message", T: () => Label }
        ]);
    }
    create(value?: PartialMessage<LabelsUpdateRequest>): LabelsUpdateRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LabelsUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LabelsUpdateRequest): LabelsUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* email.v1.Label label */ 2:
                    message.label = Label.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LabelsUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* email.v1.Label label = 2; */
        if (message.label)
            Label.internalBinaryWrite(message.label, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.LabelsUpdateRequest
 */
export const LabelsUpdateRequest = new LabelsUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LabelsDeleteRequest$Type extends MessageType<LabelsDeleteRequest> {
    constructor() {
        super("email.v1.LabelsDeleteRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LabelsDeleteRequest>): LabelsDeleteRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LabelsDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LabelsDeleteRequest): LabelsDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LabelsDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.LabelsDeleteRequest
 */
export const LabelsDeleteRequest = new LabelsDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LabelsPatchRequest$Type extends MessageType<LabelsPatchRequest> {
    constructor() {
        super("email.v1.LabelsPatchRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "label", kind: "message", T: () => Label }
        ]);
    }
    create(value?: PartialMessage<LabelsPatchRequest>): LabelsPatchRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LabelsPatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LabelsPatchRequest): LabelsPatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* email.v1.Label label */ 2:
                    message.label = Label.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LabelsPatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* email.v1.Label label = 2; */
        if (message.label)
            Label.internalBinaryWrite(message.label, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.LabelsPatchRequest
 */
export const LabelsPatchRequest = new LabelsPatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagesListRequest$Type extends MessageType<MessagesListRequest> {
    constructor() {
        super("email.v1.MessagesListRequest", [
            { no: 1, name: "label_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "max_results", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MessagesListRequest>): MessagesListRequest {
        const message = { labelIds: [], maxResults: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagesListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagesListRequest): MessagesListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string label_ids */ 1:
                    message.labelIds.push(reader.string());
                    break;
                case /* int64 max_results */ 2:
                    message.maxResults = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagesListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string label_ids = 1; */
        for (let i = 0; i < message.labelIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.labelIds[i]);
        /* int64 max_results = 2; */
        if (message.maxResults !== 0n)
            writer.tag(2, WireType.Varint).int64(message.maxResults);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagesListRequest
 */
export const MessagesListRequest = new MessagesListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagesBatchDeleteRequest$Type extends MessageType<MessagesBatchDeleteRequest> {
    constructor() {
        super("email.v1.MessagesBatchDeleteRequest", [
            { no: 1, name: "batch_delete_messages_request", kind: "message", T: () => BatchDeleteMessagesRequest }
        ]);
    }
    create(value?: PartialMessage<MessagesBatchDeleteRequest>): MessagesBatchDeleteRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagesBatchDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagesBatchDeleteRequest): MessagesBatchDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* email.v1.BatchDeleteMessagesRequest batch_delete_messages_request */ 1:
                    message.batchDeleteMessagesRequest = BatchDeleteMessagesRequest.internalBinaryRead(reader, reader.uint32(), options, message.batchDeleteMessagesRequest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagesBatchDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* email.v1.BatchDeleteMessagesRequest batch_delete_messages_request = 1; */
        if (message.batchDeleteMessagesRequest)
            BatchDeleteMessagesRequest.internalBinaryWrite(message.batchDeleteMessagesRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagesBatchDeleteRequest
 */
export const MessagesBatchDeleteRequest = new MessagesBatchDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagesBatchModifyRequest$Type extends MessageType<MessagesBatchModifyRequest> {
    constructor() {
        super("email.v1.MessagesBatchModifyRequest", [
            { no: 1, name: "batch_modify_messages_request", kind: "message", T: () => BatchModifyMessagesRequest }
        ]);
    }
    create(value?: PartialMessage<MessagesBatchModifyRequest>): MessagesBatchModifyRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagesBatchModifyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagesBatchModifyRequest): MessagesBatchModifyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* email.v1.BatchModifyMessagesRequest batch_modify_messages_request */ 1:
                    message.batchModifyMessagesRequest = BatchModifyMessagesRequest.internalBinaryRead(reader, reader.uint32(), options, message.batchModifyMessagesRequest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagesBatchModifyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* email.v1.BatchModifyMessagesRequest batch_modify_messages_request = 1; */
        if (message.batchModifyMessagesRequest)
            BatchModifyMessagesRequest.internalBinaryWrite(message.batchModifyMessagesRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagesBatchModifyRequest
 */
export const MessagesBatchModifyRequest = new MessagesBatchModifyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagesSendRequest$Type extends MessageType<MessagesSendRequest> {
    constructor() {
        super("email.v1.MessagesSendRequest", [
            { no: 1, name: "message_raw", kind: "message", T: () => Message }
        ]);
    }
    create(value?: PartialMessage<MessagesSendRequest>): MessagesSendRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagesSendRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagesSendRequest): MessagesSendRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* email.v1.Message message_raw */ 1:
                    message.messageRaw = Message.internalBinaryRead(reader, reader.uint32(), options, message.messageRaw);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagesSendRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* email.v1.Message message_raw = 1; */
        if (message.messageRaw)
            Message.internalBinaryWrite(message.messageRaw, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagesSendRequest
 */
export const MessagesSendRequest = new MessagesSendRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagesGetRequest$Type extends MessageType<MessagesGetRequest> {
    constructor() {
        super("email.v1.MessagesGetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MessagesGetRequest>): MessagesGetRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagesGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagesGetRequest): MessagesGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagesGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagesGetRequest
 */
export const MessagesGetRequest = new MessagesGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagesDeleteRequest$Type extends MessageType<MessagesDeleteRequest> {
    constructor() {
        super("email.v1.MessagesDeleteRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MessagesDeleteRequest>): MessagesDeleteRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagesDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagesDeleteRequest): MessagesDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagesDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagesDeleteRequest
 */
export const MessagesDeleteRequest = new MessagesDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagesModifyRequest$Type extends MessageType<MessagesModifyRequest> {
    constructor() {
        super("email.v1.MessagesModifyRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "modify_message_request", kind: "message", T: () => ModifyMessageRequest }
        ]);
    }
    create(value?: PartialMessage<MessagesModifyRequest>): MessagesModifyRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagesModifyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagesModifyRequest): MessagesModifyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* email.v1.ModifyMessageRequest modify_message_request */ 2:
                    message.modifyMessageRequest = ModifyMessageRequest.internalBinaryRead(reader, reader.uint32(), options, message.modifyMessageRequest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagesModifyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* email.v1.ModifyMessageRequest modify_message_request = 2; */
        if (message.modifyMessageRequest)
            ModifyMessageRequest.internalBinaryWrite(message.modifyMessageRequest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagesModifyRequest
 */
export const MessagesModifyRequest = new MessagesModifyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagesTrashRequest$Type extends MessageType<MessagesTrashRequest> {
    constructor() {
        super("email.v1.MessagesTrashRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MessagesTrashRequest>): MessagesTrashRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagesTrashRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagesTrashRequest): MessagesTrashRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagesTrashRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagesTrashRequest
 */
export const MessagesTrashRequest = new MessagesTrashRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagesUntrashRequest$Type extends MessageType<MessagesUntrashRequest> {
    constructor() {
        super("email.v1.MessagesUntrashRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MessagesUntrashRequest>): MessagesUntrashRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagesUntrashRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagesUntrashRequest): MessagesUntrashRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagesUntrashRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagesUntrashRequest
 */
export const MessagesUntrashRequest = new MessagesUntrashRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagesAttachmentsGetRequest$Type extends MessageType<MessagesAttachmentsGetRequest> {
    constructor() {
        super("email.v1.MessagesAttachmentsGetRequest", [
            { no: 1, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MessagesAttachmentsGetRequest>): MessagesAttachmentsGetRequest {
        const message = { messageId: "", id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessagesAttachmentsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagesAttachmentsGetRequest): MessagesAttachmentsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string messageId */ 1:
                    message.messageId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagesAttachmentsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string messageId = 1; */
        if (message.messageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.messageId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.MessagesAttachmentsGetRequest
 */
export const MessagesAttachmentsGetRequest = new MessagesAttachmentsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThreadsListRequest$Type extends MessageType<ThreadsListRequest> {
    constructor() {
        super("email.v1.ThreadsListRequest", [
            { no: 1, name: "label_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "max_results", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ThreadsListRequest>): ThreadsListRequest {
        const message = { labelIds: [], maxResults: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ThreadsListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThreadsListRequest): ThreadsListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string label_ids */ 1:
                    message.labelIds.push(reader.string());
                    break;
                case /* int64 max_results */ 2:
                    message.maxResults = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThreadsListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string label_ids = 1; */
        for (let i = 0; i < message.labelIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.labelIds[i]);
        /* int64 max_results = 2; */
        if (message.maxResults !== 0n)
            writer.tag(2, WireType.Varint).int64(message.maxResults);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.ThreadsListRequest
 */
export const ThreadsListRequest = new ThreadsListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThreadsGetRequest$Type extends MessageType<ThreadsGetRequest> {
    constructor() {
        super("email.v1.ThreadsGetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ThreadsGetRequest>): ThreadsGetRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ThreadsGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThreadsGetRequest): ThreadsGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThreadsGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.ThreadsGetRequest
 */
export const ThreadsGetRequest = new ThreadsGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThreadsDeleteRequest$Type extends MessageType<ThreadsDeleteRequest> {
    constructor() {
        super("email.v1.ThreadsDeleteRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ThreadsDeleteRequest>): ThreadsDeleteRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ThreadsDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThreadsDeleteRequest): ThreadsDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThreadsDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.ThreadsDeleteRequest
 */
export const ThreadsDeleteRequest = new ThreadsDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThreadsModifyRequest$Type extends MessageType<ThreadsModifyRequest> {
    constructor() {
        super("email.v1.ThreadsModifyRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "modify_thread_request", kind: "message", T: () => ModifyThreadRequest }
        ]);
    }
    create(value?: PartialMessage<ThreadsModifyRequest>): ThreadsModifyRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ThreadsModifyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThreadsModifyRequest): ThreadsModifyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* email.v1.ModifyThreadRequest modify_thread_request */ 2:
                    message.modifyThreadRequest = ModifyThreadRequest.internalBinaryRead(reader, reader.uint32(), options, message.modifyThreadRequest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThreadsModifyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* email.v1.ModifyThreadRequest modify_thread_request = 2; */
        if (message.modifyThreadRequest)
            ModifyThreadRequest.internalBinaryWrite(message.modifyThreadRequest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.ThreadsModifyRequest
 */
export const ThreadsModifyRequest = new ThreadsModifyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThreadsTrashRequest$Type extends MessageType<ThreadsTrashRequest> {
    constructor() {
        super("email.v1.ThreadsTrashRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ThreadsTrashRequest>): ThreadsTrashRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ThreadsTrashRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThreadsTrashRequest): ThreadsTrashRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThreadsTrashRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.ThreadsTrashRequest
 */
export const ThreadsTrashRequest = new ThreadsTrashRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThreadsUntrashRequest$Type extends MessageType<ThreadsUntrashRequest> {
    constructor() {
        super("email.v1.ThreadsUntrashRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ThreadsUntrashRequest>): ThreadsUntrashRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ThreadsUntrashRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThreadsUntrashRequest): ThreadsUntrashRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThreadsUntrashRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message email.v1.ThreadsUntrashRequest
 */
export const ThreadsUntrashRequest = new ThreadsUntrashRequest$Type();
/**
 * @generated ServiceType for protobuf service email.v1.Email
 */
export const Email = new ServiceType("email.v1.Email", [
    { name: "DraftsList", options: {}, I: DraftsListRequest, O: ListDraftsResponse },
    { name: "DraftsCreate", options: {}, I: DraftsCreateRequest, O: Draft },
    { name: "DraftsSend", options: {}, I: DraftsSendRequest, O: Message },
    { name: "DraftsGet", options: {}, I: DraftsGetRequest, O: Draft },
    { name: "DraftsUpdate", options: {}, I: DraftsUpdateRequest, O: Draft },
    { name: "DraftsDelete", options: {}, I: DraftsDeleteRequest, O: Empty },
    { name: "LabelsList", options: {}, I: Empty, O: ListLabelsResponse },
    { name: "LabelsCreate", options: {}, I: LabelsCreateRequest, O: Label },
    { name: "LabelsGet", options: {}, I: LabelsGetRequest, O: Label },
    { name: "LabelsUpdate", options: {}, I: LabelsUpdateRequest, O: Label },
    { name: "LabelsDelete", options: {}, I: LabelsDeleteRequest, O: Empty },
    { name: "LabelsPatch", options: {}, I: LabelsPatchRequest, O: Label },
    { name: "MessagesList", options: {}, I: MessagesListRequest, O: ListMessagesResponse },
    { name: "MessagesBatchDelete", options: {}, I: MessagesBatchDeleteRequest, O: Empty },
    { name: "MessagesBatchModify", options: {}, I: MessagesBatchModifyRequest, O: Empty },
    { name: "MessagesSend", options: {}, I: MessagesSendRequest, O: Message },
    { name: "MessagesGet", options: {}, I: MessagesGetRequest, O: Message },
    { name: "MessagesDelete", options: {}, I: MessagesDeleteRequest, O: Empty },
    { name: "MessagesModify", options: {}, I: MessagesModifyRequest, O: Message },
    { name: "MessagesTrash", options: {}, I: MessagesTrashRequest, O: Message },
    { name: "MessagesUntrash", options: {}, I: MessagesUntrashRequest, O: Message },
    { name: "MessagesAttachmentsGet", options: {}, I: MessagesAttachmentsGetRequest, O: MessagePartBody },
    { name: "ThreadsList", options: {}, I: ThreadsListRequest, O: ListThreadsResponse },
    { name: "ThreadsGet", options: {}, I: ThreadsGetRequest, O: Thread },
    { name: "ThreadsDelete", options: {}, I: ThreadsDeleteRequest, O: Empty },
    { name: "ThreadsModify", options: {}, I: ThreadsModifyRequest, O: Thread },
    { name: "ThreadsTrash", options: {}, I: ThreadsTrashRequest, O: Thread },
    { name: "ThreadsUntrash", options: {}, I: ThreadsUntrashRequest, O: Thread }
]);
